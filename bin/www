#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cors-demos:server');
var http = require('http');

var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io     = socket(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


io.on('connection', function (socket) {
  //设置名字
  socket.on("set_name", function(name){
      if(!socket.username){
          socket.username = name;
          //随机头像
          socket.cover = Math.floor(Math.random()*5+1)+".png";
          socket.emit("profile", {cover: socket.cover});
      }
  });
  //聊天
  socket.on("chat", function(){
      socket.join("chat");
  });
  //发送消息
  socket.on("message", function(msg){
      var send_msg = {
          content: msg, name: socket.username, cover: socket.cover
      };
      socket.broadcast.to("chat").emit("message", send_msg);
  });
  //断开连接
  socket.on('disconnect', function() {
      socket.leave("chat");
      if(socket.room) socket.leave(socket.room);
  });
});
